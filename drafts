protected function BuildWhere($filterBy, $mappingExceptions = null, $addWhere = true, $caseInsensitive = true, $splitLike = true) {
        $where = '';
        $separator = '  ';
        if (is_array($filterBy) && count($filterBy) > 0) {
            $separator = ' AND ';
            $index = 0;
            if (!is_array($filterBy[0]) && ($filterBy[0] == 'OR' || $filterBy[0] == 'AND')) {
                $separator = " " . $filterBy[0] . " ";
                $index = 1;
            }

            for (; $index < count($filterBy); $index++) {
                $condition = $filterBy[$index];
                //skip incorrect condition
                if (count($condition) < 2) {
                    continue;
                }
                if (!is_array($condition[0]) && ($condition[0] == 'OR' || $condition[0] == 'AND')) {
                    $where .= $separator . ' (' . trim($this->BuildWhere($condition, $mappingExceptions, false)) . ') ';
                } else {
                    if (!empty($mappingExceptions) && array_key_exists($condition[0], $mappingExceptions)) {
                        $columnName = $mappingExceptions[$condition[0]];
                    } else if (array_key_exists($condition[0], $this->mapperToDB)) {
                        $columnName = $this->mapperToDB[$condition[0]];
                    }

                    if (count($condition) == 2) {
                        $condition[2] = '=';
                    }
                    if (count($condition) == 4 && $condition[3] === true) { // checks that fourth element of condition array is used properly
                        $secondColumnName = $condition[1];
                        if (!empty($mappingExceptions) && array_key_exists($condition[1], $mappingExceptions)) {
                            $secondColumnName = $mappingExceptions[$condition[1]];
                        } else if (array_key_exists($condition[1], $this->mapperToDB)) {
                            $secondColumnName = $this->mapperToDB[$condition[1]];
                        }
                        $where .= $separator . " " . $columnName . " " . $condition[2] . " " . $secondColumnName . " ";
                    }
                    else if (strtoupper($condition[2]) == 'LIKE') {
                        $extendedLike = '';
                        if ($splitLike == true) {
                            foreach (explode(' ', trim($condition[1])) as $word) {
                                if (strlen(trim($word)) > 0) {
                                    $extendedLike .= " OR " . $columnName . " LIKE '%" . $this->db->escape_like_str(($caseInsensitive ? strtoupper(trim($word, ',')) : trim($word, ','))) . "%' ";
                                }
                            }
                            $where .= $separator . " (" . substr($extendedLike, 3) . ") ";
                        } else {
                            $where .= $separator . " " . $columnName . " LIKE '%" . $this->db->escape_like_str($caseInsensitive ? strtoupper(trim($condition[1])) : $condition[1]) . "%' ";
                        }
                    } else if (strtoupper($condition[2]) == 'IN') {
                        $where .= $separator . " " . $columnName . " IN (" . implode(',', $this->db->escape($condition[1])) . ") ";
                    } else {
                        $where .= $separator . " " . $columnName . " " . $condition[2] . " " . $this->db->escape($condition[1]) . " ";
                    }
                }
            }
        }

        if (strlen($where) > 0) {
            $where = ($addWhere === true ? "WHERE " : "") . substr($where, strlen($separator) + 1);
        }

        return $where;
    }
